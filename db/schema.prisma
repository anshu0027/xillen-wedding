generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StepStatus {
  STEP1
  STEP2
  STEP3
  COMPLETE
}

enum QuoteSource {
  CUSTOMER // Customer-generated quotes (PCI prefix)
  ADMIN // Admin-generated quotes (QAI prefix)
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?  @db.VarChar(15)
  quotes    quote[]
  createdAt DateTime @default(now())

  @@index([email])
}

model quote {
  id                     Int         @id @default(autoincrement())
  quoteNumber            String      @unique
  userId                 Int
  user                   User        @relation(fields: [userId], references: [id])
  email                  String
  coverageLevel          Int?
  liabilityCoverage      Float?
  liquorLiability        Boolean?    @default(false)
  covidDisclosure        Boolean?
  specialActivities      Boolean?
  totalPremium           Float?
  basePremium            Float?
  liabilityPremium       Float?
  liquorLiabilityPremium Float?
  status                 StepStatus  @default(STEP1)
  source                 QuoteSource @default(CUSTOMER)
  isCustomerGenerated    Boolean     @default(false)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  convertedToPolicy      Boolean     @default(false)
  emailSent              Boolean     @default(false)
  emailSentAt            DateTime?
  residentState          String?

  // Relations
  event          Event?        @relation("QuoteToEvent", fields: [eventId], references: [id])
  eventId        Int?          @unique
  policyHolder   PolicyHolder? @relation("QuoteToPolicyHolder", fields: [policyHolderId], references: [id])
  policyHolderId Int?          @unique
  policy         Policy?

  @@index([userId])
  @@index([status])
  @@index([source])
  @@index([convertedToPolicy])
}

model Event {
  id Int @id @default(autoincrement())

  // FK to quote (admin flow)
  quote   quote? @relation("QuoteToEvent")
  quoteId Int?   @unique

  // FK to policy (customer flow)
  policy   Policy? @relation("PolicyToEvent")
  policyId Int?    @unique

  eventType String
  eventDate DateTime
  maxGuests Int

  // Honoree fields
  honoree1FirstName String?
  honoree1LastName  String?
  honoree2FirstName String?
  honoree2LastName  String?

  venue Venue?
}

model Venue {
  id Int @id @default(autoincrement())

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int   @unique

  name     String
  address1 String
  address2 String?
  country  String
  city     String
  state    String? @map("state_column")
  zip      String? @map("zip_code")

  locationType         String?
  ceremonyLocationType String?
  indoorOutdoor        String?
  venueAsInsured       Boolean?
}

model PolicyHolder {
  id Int @id @default(autoincrement())

  // FK to quote (admin flow)
  quote   quote? @relation("QuoteToPolicyHolder")
  quoteId Int?   @unique

  // FK to policy (customer flow)
  policy   Policy? @relation("PolicyToPolicyHolder")
  policyId Int?

  firstName          String
  lastName           String
  phone              String
  relationship       String?
  hearAboutUs        String?
  address            String
  country            String
  city               String
  state              String?  @map("state_column")
  zip                String?  @map("zip_code")
  legalNotices       Boolean?
  completingFormName String?
}

model Policy {
  id           Int       @id @default(autoincrement())
  policyNumber String    @unique
  quoteId      Int?      @unique
  quote        quote?    @relation(fields: [quoteId], references: [id])
  pdfUrl       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  emailSent    Boolean   @default(false)
  emailSentAt  DateTime?
  payments     Payment[]

  // Customer flow relations to event and policyHolder
  event   Event? @relation("PolicyToEvent", fields: [eventId], references: [id])
  eventId Int?   @unique

  policyHolder   PolicyHolder? @relation("PolicyToPolicyHolder", fields: [policyHolderId], references: [id])
  policyHolderId Int?          @unique
}

model Payment {
  id        Int           @id @default(autoincrement())
  policyId  Int
  policy    Policy        @relation(fields: [policyId], references: [id])
  amount    Float
  status    PaymentStatus @default(PENDING)
  method    String?
  reference String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([status])
  @@index([policyId])
}
